# -*- coding: utf-8 -*-
"""Analitica.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o-PI6K2TGtJ2S-4kE8QuUS7fBZ_QOf0A
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import datetime as dt
import missingno as msno

# Visualización
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objects as go
import pandas as pd
import pyodbc
from sqlalchemy import create_engine

!pip install pyodbc pandas sqlalchemy

"""**1) Ver los parametros del dataset**"""

df = pd.read_csv('/content/drive/Shareddrives/Analitica Trabajo/Colombianos.csv')

df.tail()

"""**1. Normalización de la columna Localización**"""

df[['Latitud', 'Longitud']] = df['Localización'].str.extract(r'\(([^,]+),\s([^)]+)\)')
df['Latitud'] = pd.to_numeric(df['Latitud'], errors='coerce')
df['Longitud'] = pd.to_numeric(df['Longitud'], errors='coerce')

# Eliminar la columna original 'Localización'
df.drop('Localización', axis=1, inplace=True)

"""**2. Eliminar registros con valores nulos**"""

# Verificar si hay registros nulos y eliminarlos
df.replace(-1, np.nan, inplace=True)  # Considerar -1 como NaN para estaturas
df.dropna(inplace=True)  # Eliminar filas con valores nulos

"""**3. Mostrar el DataFrame final después de la normalización y limpieza**"""

print("\nDataFrame normalizado y sin valores nulos:")
print(df)

"""**Crear índices en la base de datos SQL para optimizar consultas.**"""

server = 'DESKTOP-9JC24GI'  # Cambia esto por tu servidor
database = 'colombiano'          # Nombre de tu base de datos
username = 'DESKTOP-9JC24GI\\PERSONAL'          # Tu usuario de SQL Server
password = ''       # Tu contraseña de SQL Server

# Usando pyodbc + sqlalchemy para conectarse a SQL Server
connection_string = f"mssql+pyodbc://{username}:{password}@{server}/{database}?driver=ODBC+Driver+17+for+SQL+Server"
engine = create_engine(connection_string)

# Paso 4: Crear la tabla en SQL Server (se ejecutará automáticamente si no existe)
# El método to_sql crea la tabla si no existe, y carga los datos
df.to_sql('personas', engine, if_exists='replace', index=False)

print("Datos cargados en la tabla 'personas' de la base de datos 'colombiano'")